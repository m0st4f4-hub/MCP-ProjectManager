#!/usr/bin/env python
from __future__ import annotations
import enum
import importlib
import inspect
from pathlib import Path
import sys


def main() -> None:
    repo_root = Path(__file__).resolve().parents[1]
    sys.path.insert(0, str(repo_root))
    module = importlib.import_module("backend.enums")
    enum_names = getattr(module, "__all__", None)
    if not enum_names:
        enum_names = [
            name
            for name, obj in inspect.getmembers(module, inspect.isclass)
            if issubclass(obj, enum.Enum)
        ]

    lines = [
        "/* eslint-disable */",
        "// This file is auto-generated by scripts/generate_ts_enums.py",
        "",
    ]

    for enum_name in enum_names:
        enum_cls = getattr(module, enum_name)
        ts_name = enum_name[:-4] if enum_name.endswith("Enum") else enum_name
        lines.append(f"export enum {ts_name} {{")
        for member in enum_cls:  # type: ignore[arg-type]
            lines.append(f"  {member.name} = '{member.value}',")
        lines.append("}")
        lines.append("")

    out_path = Path("frontend/src/types/generatedEnums.ts")
    out_path.write_text("\n".join(lines) + "\n")
    print(f"generated {out_path}")

    # Update statusUtils.ts with any missing statuses
    task_statuses = [member.value for member in getattr(module, "TaskStatusEnum")]
    utils_path = Path("frontend/src/lib/statusUtils.ts")
    if utils_path.exists():
        utils_text = utils_path.read_text()
        for status in task_statuses:
            if status not in utils_text:
                # Append to StatusID union and STATUS_MAP with generic attrs
                utils_text = utils_text.replace(
                    "| \"PENDING_RECOVERY_ATTEMPT\";",
                    f"| \"PENDING_RECOVERY_ATTEMPT\"\n  | \"{status}\"\n  | \"{status.upper().replace(' ', '_')}\";",
                )
                insert_index = utils_text.find("} as const")
                snippet = f"  \"{status}\": {{\n    id: \"{status}\",\n    displayName: \"{status}\",\n    category: \"todo\",\n    description: \"\",\n    colorScheme: \"gray\",\n    icon: \"InfoIcon\",\n    isTerminal: False,\n    isDynamic: False,\n  }},\n  {status.upper().replace(' ', '_')}: {{\n    id: \"{status}\",\n    displayName: \"{status}\",\n    category: \"todo\",\n    description: \"\",\n    colorScheme: \"gray\",\n    icon: \"InfoIcon\",\n    isTerminal: False,\n    isDynamic: False,\n  }},\n"
                utils_text = utils_text[:insert_index] + snippet + utils_text[insert_index:]
        utils_path.write_text(utils_text)


if __name__ == "__main__":
    main()
