#!/usr/bin/env python
from __future__ import annotations
import enum
import importlib
import inspect
from pathlib import Path
import sys


def main() -> None:
    repo_root = Path(__file__).resolve().parents[1]
    sys.path.insert(0, str(repo_root))
    module = importlib.import_module("backend.enums")
    enum_names = getattr(module, "__all__", None)
    if not enum_names:
        enum_names = [
            name
            for name, obj in inspect.getmembers(module, inspect.isclass)
            if issubclass(obj, enum.Enum)
        ]

    lines = [
        "/* eslint-disable */",
        "// This file is auto-generated by scripts/generate_ts_enums.py",
        "",
    ]

    for enum_name in enum_names:
        enum_cls = getattr(module, enum_name)
        ts_name = enum_name[:-4] if enum_name.endswith("Enum") else enum_name
        lines.append(f"export enum {ts_name} {{")
        for member in enum_cls:  # type: ignore[arg-type]
            lines.append(f"  {member.name} = '{member.value}',")
        lines.append("}")
        lines.append("")

    out_path = Path("frontend/src/types/generatedEnums.ts")
    out_path.write_text("\n".join(lines) + "\n")
    print(f"generated {out_path}")


if __name__ == "__main__":
    main()
