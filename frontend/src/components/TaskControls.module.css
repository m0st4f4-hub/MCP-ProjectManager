/* frontend/src/components/TaskControls.module.css */

.taskControlsContainer {
    display: flex;
    flex-direction: column;
    gap: var(--chakra-space-5); /* spacing={5} */
    margin-bottom: var(--chakra-space-6); /* mb={6} */
    background-color: var(--chakra-colors-bg-surface, white); /* bg="bg.surface" */
    padding: var(--chakra-space-4); /* p={4} */
    border-radius: var(--chakra-radii-lg); /* borderRadius="lg" */
    align-items: stretch; /* align="stretch" */
    border-width: 1px; /* borderWidth="1px" */
    border-style: solid;
    border-color: var(--chakra-colors-border-discreet, #E2E8F0); /* borderColor="border.discreet" */
}

.divider {
    border: 0; /* Reset default border */
    border-bottom-width: 1px;
    border-bottom-style: solid;
    border-bottom-color: var(--chakra-colors-border-divider, #E2E8F0); /* borderColor="border.divider" */
    margin-bottom: var(--chakra-space-4); /* mb={4} - only one usage has this, the others don't specify mb */
    width: 100%;
}

.dividerNoMarginBottom {
    border: 0;
    border-bottom-width: 1px;
    border-bottom-style: solid;
    border-bottom-color: var(--chakra-colors-border-divider, #E2E8F0);
    width: 100%;
}

.bulkActionsFlex {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: var(--chakra-space-3); /* gap={3} */
}

.viewOptionsFlex {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    /* Base styles: alignItems="stretch", flexDirection="column", gap={3} */
    align-items: stretch;
    flex-direction: column;
    gap: var(--chakra-space-3);
}

/* md breakpoint for viewOptionsFlex */
@media (min-width: 48em) { /* Assuming md is 48em */
    .viewOptionsFlex {
        align-items: center; /* alignItems={{ md: "center" }} */
        flex-direction: row; /* flexDirection={{ md: "row" }} */
        gap: var(--chakra-space-4); /* gap={{ md:4 }} */
    }
}

.bulkActionsHStack {
    display: flex;
    align-items: center;
    gap: var(--chakra-space-3); /* spacing={3} */
}

.viewOptionsLeftHStack {
    display: flex;
    align-items: center;
    flex-wrap: wrap; /* flexWrap="wrap" */
    width: 100%; /* w={{ base: '100%' }} */
    gap: var(--chakra-space-2); /* spacing={{base:2}} and gap={{base: 2}} */
}

@media (min-width: 48em) {
    .viewOptionsLeftHStack {
        width: auto; /* w={{ md: 'auto' }} */
        gap: var(--chakra-space-3); /* spacing={{md:3}} and gap={{md: 2}} - prioritizing spacing */
    }
}

.viewOptionsRightHStack {
    display: flex;
    flex-wrap: nowrap; /* flexWrap="nowrap" */
    width: 100%; /* w={{ base: '100%' }} */
    justify-content: space-between; /* justify={{base: "space-between"}} */
    gap: var(--chakra-space-2); /* spacing={{base:2}} */
}

@media (min-width: 48em) {
    .viewOptionsRightHStack {
        width: auto; /* w={{ md: 'auto' }} */
        justify-content: flex-end; /* justify={{md: "flex-end"}} */
        gap: var(--chakra-space-3); /* spacing={{md:3}} */
    }
}

.checkboxLabel {
    /* For text associated with a checkbox, if not part of the checkbox component itself */
    font-size: var(--chakra-fontSizes-sm); /* Corresponds to size="sm" on Checkbox text part */
    /* colorScheme="brand" for the checkbox itself is harder to replicate without specific Chakra variables */
}

.selectedCountText {
    font-size: var(--chakra-fontSizes-sm); /* fontSize="sm" */
    color: var(--chakra-colors-text-secondary, #718096); /* color="text.secondary" */
}

.formLabel {
    /* General form label, can be specialized */
}

.groupByLabel {
    margin-bottom: 0; /* mb="0" */
    font-size: var(--chakra-fontSizes-sm); /* fontSize="sm" */
    color: var(--chakra-colors-text-secondary, #718096); /* color="text.secondary" */
    white-space: nowrap; /* whiteSpace="nowrap" */
    display: inline-block; /* Ensure it aligns well in HStack */
}

.selectControl {
    /* size="sm" equivalent */
    font-size: var(--chakra-fontSizes-sm, 0.875rem);
    height: var(--chakra-sizes-8, 2rem); /* Chakra sm height */
    padding-left: var(--chakra-space-3, 0.75rem);
    padding-right: var(--chakra-space-3, 0.75rem);
    background-color: var(--chakra-colors-bg-input, white); /* bg="bg.input" */
    border: 1px solid var(--chakra-colors-border-input, #CBD5E0); /* borderColor="border.input" */
    color: var(--chakra-colors-text-primary, black); /* color="text.primary" */
    border-radius: var(--chakra-radii-md); /* borderRadius="md" */
    /* sx: { option: { bg: 'bg.input', color: 'text.primary' } } - difficult to style options cross-browser via parent */
}

.selectControl:hover {
    border-color: var(--chakra-colors-border-input-hover, var(--chakra-colors-gray-300)); /* _hover: { borderColor: "border.input.hover" } */
}

.selectControl option {
    background-color: var(--chakra-colors-bg-input, white);
    color: var(--chakra-colors-text-primary, black);
}

.groupBySelect {
    /* Extends .selectControl */
    width: auto; /* w={{ base: 'auto'}} */
}

@media (min-width: 48em) {
    .groupBySelect {
        width: 130px; /* w={{ md: '130px' }} */
    }
}

.pollingSpinner {
    /* size="sm" */
    width: var(--chakra-space-3, 0.75rem); /* Approximate sm size */
    height: var(--chakra-space-3, 0.75rem);
    color: var(--chakra-colors-brand-500, #3182CE); /* color="brand.500" */
    /* Animation is part of Chakra's Spinner, this just sets size/color */
    border-radius: 50%;
    border-width: 2px;
    border-style: solid;
    border-bottom-color: transparent; /* Typical spinner styling */
    animation: spin 0.8s linear infinite; /* Basic spin animation */
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

.buttonBaseSm {
    /* Common styles for size="sm" buttons */
    font-size: var(--chakra-fontSizes-sm, 0.875rem);
    height: var(--chakra-sizes-8, 2rem); /* Chakra sm height */
    padding: 0 var(--chakra-space-3, 0.75rem); /* Horizontal padding for sm */
    border-radius: var(--chakra-radii-md);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--chakra-space-2);
    cursor: pointer;
    line-height: 1.2; /* Chakra default */
    font-weight: var(--chakra-fontWeights-medium);
}

.bulkActionsButton {
    /* Extends .buttonBaseSm */
    /* variant="outline" colorScheme="brand" */
    border: 1px solid var(--chakra-colors-brand-500, #3182CE);
    color: var(--chakra-colors-brand-500, #3182CE);
    background-color: transparent;
}
.bulkActionsButton:hover {
    background-color: var(--chakra-colors-brand-50, #EBF8FF); /* Subtle brand hover */
}

.menuList {
    z-index: 1500; /* For zIndex="popover" */
    background-color: var(--chakra-colors-bg-surface, white);
    border: 1px solid var(--chakra-colors-border-overlay, #E2E8F0);
    box-shadow: var(--chakra-shadows-md);
    border-radius: var(--chakra-radii-md);
    min-width: 200px; /* Typical min-width for menus */
    padding-top: var(--chakra-space-1);
    padding-bottom: var(--chakra-space-1);
    position: absolute; /* Added */
    right: 0; /* Added */
    top: 100%; /* Added */
    margin-top: var(--chakra-space-1); /* Added */
}

.menuItem {
    display: flex;
    align-items: center;
    padding: var(--chakra-space-2) var(--chakra-space-3);
    font-size: var(--chakra-fontSizes-sm);
    color: var(--chakra-colors-text-primary, black);
    cursor: pointer;
    gap: var(--chakra-space-2);
    border-radius: var(--chakra-radii-sm); /* Slight rounding for menu items */
    margin: 0 var(--chakra-space-1); /* Spacing for items within list */
}
.menuItem:hover {
    background-color: var(--chakra-colors-bg-hover-subtle, #EDF2F7);
}

.menuItemDestructive {
    /* Extends .menuItem */
    color: var(--chakra-colors-red-500, #E53E3E) !important; /* Ensure override if needed */
}
.menuItemDestructive:hover {
    background-color: var(--chakra-colors-red-50, #FFF5F5) !important;
    color: var(--chakra-colors-red-600, #C53030) !important;
}

.menuItemDisabled {
    /* Extends .menuItem */
    opacity: 0.4;
    cursor: not-allowed;
}
.menuItemDisabled:hover {
    background-color: transparent; /* No hover effect for disabled items */
}

.menuItemIndent {
    /* Extends .menuItem for pl={8} */
    padding-left: var(--chakra-space-8) !important; /* Chakra space 8 */
}

.menuDivider {
    height: 1px;
    background-color: var(--chakra-colors-border-divider, #E2E8F0);
    margin-top: var(--chakra-space-2);
    margin-bottom: var(--chakra-space-2);
}

.viewToggleButton {
    /* Extends .buttonBaseSm */
    /* variant="outline" borderColor="border.base" color="text.primary" */
    border: 1px solid var(--chakra-colors-border-base, #E2E8F0);
    color: var(--chakra-colors-text-primary, black);
    background-color: transparent;
    flex-shrink: 0; /* flexShrink={0} */
}
.viewToggleButton:hover {
    background-color: var(--chakra-colors-bg-hover-subtle, #EDF2F7);
}

.addTaskButton {
    /* Extends .buttonBaseSm */
    /* bg="bg.button.primary" color="text.button.primary" _hover={{ bg: 'brand.600' }} */
    background-color: var(--chakra-colors-bg-button-primary, var(--chakra-colors-brand-500, #3182CE));
    color: var(--chakra-colors-text-button-primary, white);
    border: 1px solid transparent; /* Ensure consistent border size with outline buttons */
    flex-shrink: 0; /* flexShrink={0} */
}
.addTaskButton:hover {
    background-color: var(--chakra-colors-brand-600, #2B6CB0);
}

.viewOptionsFlexMarginTopNegative {
    margin-top: calc(var(--chakra-space-4) * -1); /* mt={-4} */
}

.flexAlignCenter {
    display: flex;
    align-items: center;
}

.marginLeftSpace2 {
    margin-left: var(--chakra-space-2);
} 