/* frontend/src/components/TaskControls.module.css */

.taskControlsContainer {
    display: flex;
    flex-direction: column;
    gap: var(--chakra-space-5); /* spacing={5} */
    margin-bottom: var(--chakra-space-6); /* mb={6} */
    background-color: var(--chakra-colors-bg-surface, var(--core-colors-white)); /* bg="bg.surface" */
    padding: var(--chakra-space-4); /* p={4} */
    border-radius: var(--chakra-radii-lg); /* borderRadius="lg" */
    align-items: stretch; /* align="stretch" */
    border-width: var(--borders-width-xs); /* borderWidth="1px" */
    border-style: solid;
    border-color: var(--chakra-colors-border-discreet, var(--colors-borderDecorative)); /* borderColor="border.discreet", E2E8F0 */
}

.divider {
    border-width: var(--borders-width-none); /* Reset default border, was 0 */
    border-bottom-width: var(--borders-width-xs); /* was 1px */
    border-bottom-style: solid;
    border-bottom-color: var(--chakra-colors-border-divider, var(--colors-borderDecorative)); /* borderColor="border.divider", E2E8F0 */
    margin-bottom: var(--chakra-space-4); /* mb={4} - only one usage has this, the others don't specify mb */
    width: var(--sizing-full); /* was 100% */
}

.dividerNoMarginBottom {
    border-width: var(--borders-width-none); /* was 0 */
    border-bottom-width: var(--borders-width-xs); /* was 1px */
    border-bottom-style: solid;
    border-bottom-color: var(--chakra-colors-border-divider, var(--colors-borderDecorative));
    width: var(--sizing-full); /* was 100% */
}

.bulkActionsFlex {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: var(--chakra-space-3); /* gap={3} */
}

.viewOptionsFlex {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    /* Base styles: alignItems="stretch", flexDirection="column", gap={3} */
    align-items: stretch;
    flex-direction: column;
    gap: var(--chakra-space-3);
}

/* md breakpoint for viewOptionsFlex */
@media (min-width: var(--breakpoints-md)) { /* Assuming md is 48em / 768px */
    .viewOptionsFlex {
        align-items: center; /* alignItems={{ md: "center" }} */
        flex-direction: row; /* flexDirection={{ md: "row" }} */
        gap: var(--chakra-space-4); /* gap={{ md:4 }} */
    }
}

.bulkActionsHStack {
    display: flex;
    align-items: center;
    gap: var(--chakra-space-3); /* spacing={3} */
}

.viewOptionsLeftHStack {
    display: flex;
    align-items: center;
    flex-wrap: wrap; /* flexWrap="wrap" */
    width: var(--sizing-full); /* w={{ base: '100%' }} */
    gap: var(--chakra-space-2); /* spacing={{base:2}} and gap={{base: 2}} */
}

@media (min-width: var(--breakpoints-md)) {
    .viewOptionsLeftHStack {
        width: auto; /* w={{ md: 'auto' }} */
        gap: var(--chakra-space-3); /* spacing={{md:3}} and gap={{md: 2}} - prioritizing spacing */
    }
}

.viewOptionsRightHStack {
    display: flex;
    flex-wrap: nowrap; /* flexWrap="nowrap" */
    width: var(--sizing-full); /* w={{ base: '100%' }} */
    justify-content: space-between; /* justify={{base: "space-between"}} */
    gap: var(--chakra-space-2); /* spacing={{base:2}} */
}

@media (min-width: var(--breakpoints-md)) {
    .viewOptionsRightHStack {
        width: auto; /* w={{ md: 'auto' }} */
        justify-content: flex-end; /* justify={{md: "flex-end"}} */
        gap: var(--chakra-space-3); /* spacing={{md:3}} */
    }
}

.checkboxLabel {
    /* For text associated with a checkbox, if not part of the checkbox component itself */
    font-size: var(--chakra-fontSizes-sm); /* Corresponds to size="sm" on Checkbox text part */
    /* colorScheme="brand" for the checkbox itself is harder to replicate without specific Chakra variables */
}

.selectedCountText {
    font-size: var(--chakra-fontSizes-sm); /* fontSize="sm" */
    color: var(--chakra-colors-text-secondary, #718096); /* color="text.secondary" */
}

.formLabel {
    /* General form label, can be specialized */
}

.groupByLabel {
    margin-bottom: var(--spacing-0); /* mb="0" */
    font-size: var(--chakra-fontSizes-sm); /* fontSize="sm" */
    color: var(--chakra-colors-text-secondary, var(--colors-textSecondary)); /* color="text.secondary" */
    white-space: nowrap; /* whiteSpace="nowrap" */
    display: inline-block; /* Ensure it aligns well in HStack */
}

.selectControl {
    /* size="sm" equivalent */
    font-size: var(--chakra-fontSizes-sm, var(--typography-fontSizes-sm));
    height: var(--chakra-sizes-8, var(--spacing-8)); /* Chakra sm height is 2rem (32px), --spacing-8 is 2rem */
    padding-left: var(--chakra-space-3, var(--spacing-3));
    padding-right: var(--chakra-space-3, var(--spacing-3));
    background-color: var(--chakra-colors-bg-input, var(--core-colors-white)); /* bg="bg.input" */
    border: var(--borders-width-xs) solid var(--chakra-colors-border-input, var(--colors-borderDecorative)); /* borderColor="border.input" */
    color: var(--chakra-colors-text-primary, var(--colors-textPrimary)); /* color="text.primary" */
    border-radius: var(--chakra-radii-md); /* borderRadius="md" */
    /* sx: { option: { bg: 'bg.input', color: 'text.primary' } } - difficult to style options cross-browser via parent */
}

.selectControl:hover {
    border-color: var(--chakra-colors-border-input-hover, var(--core-colors-neutralGray-300)); /* _hover: { borderColor: "border.input.hover" } */
}

.selectControl option {
    background-color: var(--chakra-colors-bg-input, var(--core-colors-white));
    color: var(--chakra-colors-text-primary, var(--colors-textPrimary));
}

.groupBySelect {
    /* Extends .selectControl */
    width: auto; /* w={{ base: 'auto'}} */
}

@media (min-width: var(--breakpoints-md)) {
    .groupBySelect {
        width: var(--spacing-32); /* w={{ md: '130px' }}, 130px is ~8.1rem, using 8rem (128px) token */
    }
}

.pollingSpinner {
    /* size="sm" */
    width: var(--chakra-space-3, var(--spacing-3)); /* Approximate sm size, 0.75rem */
    height: var(--chakra-space-3, var(--spacing-3));
    color: var(--chakra-colors-brand-500, var(--colors-brandPrimary)); /* color="brand.500" */
    /* Animation is part of Chakra's Spinner, this just sets size/color */
    border-radius: var(--radii-round); /* 50% */
    border-width: var(--borders-width-sm); /* was 2px */
    border-style: solid;
    border-bottom-color: transparent; /* Typical spinner styling, or var(--colors-transparent) */
    animation: spin 0.8s linear infinite; /* Basic spin animation, 0.8s is fine */
}

@keyframes spin {
    to { transform: rotate(360deg); }
}

.buttonBaseSm {
    /* Common styles for size="sm" buttons */
    font-size: var(--chakra-fontSizes-sm, var(--typography-fontSizes-sm));
    height: var(--chakra-sizes-8, var(--spacing-8)); /* Chakra sm height, 2rem */
    padding: var(--spacing-0) var(--chakra-space-3, var(--spacing-3)); /* Horizontal padding for sm, vertical 0 */
    border-radius: var(--chakra-radii-md);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--chakra-space-2);
    cursor: pointer;
    line-height: var(--typography-lineHeights-condensed); /* Chakra default 1.2, using 1.25 token */
    font-weight: var(--chakra-fontWeights-medium);
}

.bulkActionsButton {
    /* Extends .buttonBaseSm */
    /* variant="outline" colorScheme="brand" */
    border: var(--borders-width-xs) solid var(--chakra-colors-brand-500, var(--colors-brandPrimary)); /* was 1px */
    color: var(--chakra-colors-brand-500, var(--colors-brandPrimary));
    background-color: transparent; /* or var(--colors-transparent) */
}
.bulkActionsButton:hover {
    background-color: var(--chakra-colors-brand-50, var(--core-colors-blue-50)); /* Subtle brand hover */
}

.menuList {
    z-index: var(--zIndices-popover); /* For zIndex="popover", 1500 */
    background-color: var(--chakra-colors-bg-surface, var(--core-colors-white));
    border: var(--borders-width-xs) solid var(--chakra-colors-border-overlay, var(--colors-borderDecorative)); /* was 1px */
    box-shadow: var(--chakra-shadows-md);
    border-radius: var(--chakra-radii-md);
    min-width: 12.5rem; /* Was 200px, Typical min-width for menus */
    padding-top: var(--chakra-space-1);
    padding-bottom: var(--chakra-space-1);
    position: absolute; /* Added */
    right: var(--spacing-0); /* Added, was 0 */
    top: var(--sizing-full); /* Added, was 100% */
    margin-top: var(--chakra-space-1); /* Added */
}

.menuItem {
    display: flex;
    align-items: center;
    padding: var(--chakra-space-2) var(--chakra-space-3);
    font-size: var(--chakra-fontSizes-sm);
    color: var(--chakra-colors-text-primary, var(--colors-textPrimary)); /* was black */
    cursor: pointer;
    gap: var(--chakra-space-2);
    border-radius: var(--chakra-radii-sm); /* Slight rounding for menu items */
    margin: var(--spacing-0) var(--chakra-space-1); /* Spacing for items within list, was 0 */
}
.menuItem:hover {
    background-color: var(--chakra-colors-bg-hover-subtle, var(--core-colors-neutralGray-100)); /* #EDF2F7 */
}

.menuItemDestructive {
    /* Extends .menuItem */
    color: var(--chakra-colors-red-500, var(--core-colors-red-500)) !important; /* Ensure override if needed, #E53E3E */
}
.menuItemDestructive:hover {
    background-color: var(--chakra-colors-red-50, var(--core-colors-red-50)) !important; /* #FFF5F5 */
    color: var(--chakra-colors-red-600, var(--core-colors-red-600)) !important; /* #C53030 */
}

.menuItemDisabled {
    /* Extends .menuItem */
    opacity: 0.4; /* Fine for now, could be a token if opacity scale is defined */
    cursor: not-allowed;
}
.menuItemDisabled:hover {
    background-color: transparent; /* No hover effect for disabled items, or var(--colors-transparent) */
}

.menuItemIndent {
    /* Extends .menuItem for pl={8} */
    padding-left: var(--chakra-space-8, var(--spacing-8)) !important; /* Chakra space 8 */
}

.menuDivider {
    height: var(--borders-width-xs); /* was 1px */
    background-color: var(--chakra-colors-border-divider, var(--colors-borderDecorative)); /* #E2E8F0 */
    margin-top: var(--chakra-space-2);
    margin-bottom: var(--chakra-space-2);
}

.viewToggleButton {
    /* Extends .buttonBaseSm */
    /* variant="outline" borderColor="border.base" color="text.primary" */
    border: var(--borders-width-xs) solid var(--chakra-colors-border-base, var(--colors-borderDecorative)); /* was 1px, #E2E8F0 */
    color: var(--chakra-colors-text-primary, var(--colors-textPrimary)); /* was black */
    background-color: transparent; /* or var(--colors-transparent) */
    flex-shrink: 0; /* flexShrink={0} */
}
.viewToggleButton:hover {
    background-color: var(--chakra-colors-bg-hover-subtle, var(--core-colors-neutralGray-100)); /* #EDF2F7 */
}

.addTaskButton {
    /* Extends .buttonBaseSm */
    /* bg="bg.button.primary" color="text.button.primary" _hover={{ bg: 'brand.600' }} */
    background-color: var(--chakra-colors-bg-button-primary, var(--chakra-colors-brand-500, var(--colors-brandPrimary))); /* #3182CE */
    color: var(--chakra-colors-text-button-primary, var(--core-colors-white)); /* was white */
    border: var(--borders-width-xs) solid transparent; /* Ensure consistent border size with outline buttons, or var(--colors-transparent) */
    flex-shrink: 0; /* flexShrink={0} */
}
.addTaskButton:hover {
    background-color: var(--chakra-colors-brand-600, var(--colors-brandPrimaryHover)); /* #2B6CB0 */
}

.viewOptionsFlexMarginTopNegative {
    margin-top: calc(var(--chakra-space-4) * -1); /* mt={-4} */
}

.flexAlignCenter {
    display: flex;
    align-items: center;
}

.marginLeftSpace2 {
    margin-left: var(--chakra-space-2);
} 