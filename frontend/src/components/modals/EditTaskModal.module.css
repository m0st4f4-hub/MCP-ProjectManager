/* EditTaskModal.module.css */

.formControl {
    margin-bottom: var(--spacing-4); /* Updated from var(--chakra-space-4) */
}

.formLabel {
    color: var(--colors-textPrimary); /* Updated from var(--chakra-colors-text-primary, #2D3748) */
    font-size: var(--typography-fontSizes-sm); /* Updated from var(--chakra-fontSizes-sm, 0.875rem) */
    margin-bottom: var(--spacing-1); /* Updated from var(--chakra-space-1) */
    display: block; /* Ensure margin-bottom applies */
}

.formInput,
.formTextarea,
.formSelect {
    background-color: var(--colors-bgSurface); /* Updated from var(--chakra-colors-bg-input, white) */
    color: var(--colors-textPrimary); /* Updated from var(--chakra-colors-text-input, #2D3748) */
    border: var(--borders-width-xs) var(--borders-style-solid) var(--colors-borderInteractive); /* Updated from 1px solid var(--chakra-colors-border-input, #CBD5E0) */
    border-radius: var(--radii-md); /* Updated from var(--chakra-radii-md) */
    padding: var(--spacing-2) var(--spacing-3); /* Updated from var(--chakra-space-2) var(--chakra-space-3) */
    font-size: var(--typography-fontSizes-base); /* Updated from var(--chakra-fontSizes-md, 1rem) */
    width: 100%;
    box-sizing: border-box;
}

.formInput:hover,
.formTextarea:hover,
.formSelect:hover {
    border-color: var(--core-colors-neutralGray-400); /* Updated from var(--chakra-colors-border-input-hover, var(--chakra-colors-gray-400)) - using core token as hover might be distinct */
}

.formInput:focus,
.formTextarea:focus,
.formSelect:focus {
    border-color: var(--colors-borderInteractiveFocused); /* Updated from var(--chakra-colors-border-focus, var(--chakra-colors-blue-500)) */
    box-shadow: 0 0 0 1px var(--colors-borderInteractiveFocused); /* Updated from var(--chakra-colors-border-focus, var(--chakra-colors-blue-500)) */
    outline: none;
}

.formInput::placeholder,
.formTextarea::placeholder {
    color: var(--colors-textPlaceholder); /* Updated from var(--chakra-colors-text-placeholder, #A0AEC0) */
}

.formTextarea {
    min-height: var(--spacing-20); /* Default textarea height, 80px = 5rem = --spacing-20 */
}

.checkboxControlContainer { /* For the FormControl wrapping the Checkbox */
    display: flex;
    align-items: center;
    margin-top: var(--spacing-2); /* Updated from var(--chakra-space-2) */
}

.checkboxLabel {
    /* If Checkbox itself has a label part that needs styling, or for a separate <label> */
    margin-left: var(--spacing-2); /* Updated from var(--chakra-space-2) */
    color: var(--colors-textPrimary); /* Updated from var(--chakra-colors-text-primary) */
    font-size: var(--typography-fontSizes-base); /* Updated from var(--chakra-fontSizes-md) */
}

/* Note: Styling the Checkbox component itself (the box and checkmark) heavily relies on Chakra's internal structure
   and theme. Applying simple CSS classes might not be enough for a full visual override if desired.
   Chakra's colorScheme prop is usually the best way to theme it.
   If specific visual changes are needed, it might require more complex CSS targeting Chakra's internal classes,
   or forgoing the Chakra component for a custom one. */

.readOnlyInput {
    background-color: var(--colors-bgDisabled); /* Updated from var(--chakra-colors-bg-disabled, var(--chakra-colors-gray-100)) */
    opacity: 0.7; /* Kept as is, consider tokenizing if opacity is used elsewhere */
    cursor: not-allowed;
} 