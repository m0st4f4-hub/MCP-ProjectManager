---
description:
globs:
alwaysApply: false
---
## Operational Unit Functional Profiles

Refer to individual agent rule files in `rules-md/agents/` for complete details.

*   **`ProjectManager`**: Orchestrates project workflows, manages tasks, ensures validation, and handles anomalies. Executes the [protocol.mdc](mdc:.cursor/rules/protocol.mdc).

    ### 4. Key Tools
    *   `mcp_project-manager_create_project_projects__post`
    *   `mcp_project-manager_create_task_tasks__post` (for delegating to other agents)
    *   `mcp_project-manager_get_task_list_tasks__get` (for monitoring other agents)
    *   `mcp_project-manager_get_task_by_id_tasks__task_id__get` (for monitoring other agents)
    *   `mcp_project-manager_update_task_tasks__task_id__put` (for tasks of other agents, or own assigned task if applicable)
    *   `mcp_project-manager_gen_overmind_planning_prompt`
    *   Analysis tools as specified in [protocol.mdc](mdc:.cursor/rules/protocol.mdc) (e.g., `mcp_desktop-commander_search_code`, `mcp_desktop-commander_read_file`, `mcp_web-fetch_fetch`).
    *   **Memory Tools:** `mcp_memory_create_entities`, `mcp_memory_create_relations`, `mcp_memory_add_observations`, `mcp_memory_delete_entities`, `mcp_memory_delete_observations`, `mcp_memory_delete_relations`, `mcp_memory_read_graph`, `mcp_memory_search_nodes`, `mcp_memory_open_nodes`, `mcp_memory_update_relations`.

*   **`Seeding`**: Executes the mandatory [init.mdc](mdc:.cursor/rules/init.mdc) procedure to set up and configure the `.cursor/rules/` directory.

*   **`InformationAnalyst`**: Analyzes files, code, web content, or other data based on MCP task requirements, producing structured reports. Operates in a read-only capacity for analysis.

    ### 4. Key Tools
    *   MCP Task Management: `mcp_project-manager_get_task_by_id`, `mcp_project-manager_update_task_by_id`.
    *   Rule Fetching: `mcp_desktop-commander_read_file` (for own rules, path e.g., "rules-md/agents/information-analyst.mdc"), `default_api.fetch_rules` (IDE alternative).
    *   Context & Analysis (MCP Preferred): `mcp_desktop-commander_read_file`, `mcp_desktop-commander_search_code`, `mcp_desktop-commander_list_directory`, `mcp_desktop-commander_get_file_info`, `mcp_web-fetch_fetch`, `mcp_context7_resolve-library-id`, `mcp_context7_get-library-docs`.
    *   Context & Analysis (IDE): `default_api.read_file`, `default_api.codebase_search`, `default_api.grep_search`, `default_api.web_search`.
    *   Browser-based Analysis (MCP, Read-Only): `mcp_playwright_browser_navigate`, `mcp_playwright_browser_snapshot`, `mcp_playwright_browser_take_screenshot`, `mcp_browser-tools_getConsoleErrors`, `mcp_browser-tools_getSelectedElement`, `mcp_browser-tools_runPerformanceAudit`, `mcp_browser-tools_runAccessibilityAudit`, `mcp_browser-tools_runBestPracticesAudit`.
    *   **Memory Tools:** `mcp_memory_create_entities`, `mcp_memory_create_relations`, `mcp_memory_add_observations`, `mcp_memory_delete_entities`, `mcp_memory_delete_observations`, `mcp_memory_delete_relations`, `mcp_memory_read_graph`, `mcp_memory_search_nodes`, `mcp_memory_open_nodes`, `mcp_memory_update_relations`.

*   **`ImplementationSpecialist`**: Implements code modifications, feature development, and fixes, producing tested and functional code artifacts.

*   **`PresentationLayerSpecialist`**: Implements UI style (CSS) and presentation code (HTML, frontend JS/TS) according to MCP task requirements.

*   **`UserExperienceEnhancer`**: Focuses on UI accessibility and usability, modifying the presentation layer to improve user experience.

*   **`CodeStructureSpecialist`**: Refactors existing code for improved structure, maintainability, and performance, without altering external behavior. Verifies changes with rigorous testing.

*   **`KnowledgeCurator`**: Generates, updates, and verifies inline code comments and project documentation with clarity, depth, and accuracy.

    ### 4. Key Tools
    *   MCP Task Management: `mcp_project-manager_get_task_by_id`, `mcp_project-manager_update_task_by_id`, `mcp_project-manager_create_task`.
    *   Rule Fetching: `mcp_desktop-commander_read_file` (for own rules), `default_api.fetch_rules` (IDE alternative).
    *   File Operations (MCP): `mcp_desktop-commander_read_file`, `mcp_desktop-commander_write_file`, `mcp_desktop-commander_edit_block`.
    *   Search (MCP): `mcp_desktop-commander_search_code`.
    *   File Operations (IDE): `default_api.read_file`, `default_api.edit_file`.
    *   Search (IDE): `default_api.codebase_search`, `default_api.grep_search`.
    *   **Memory Tools:** `mcp_memory_create_entities`, `mcp_memory_create_relations`, `mcp_memory_add_observations`, `mcp_memory_delete_entities`, `mcp_memory_delete_observations`, `mcp_memory_delete_relations`, `mcp_memory_read_graph`, `mcp_memory_search_nodes`, `mcp_memory_open_nodes`, `mcp_memory_update_relations`.

*   **`ExecutionValidator`**: Executes commands (tests, builds, linters) and verifies outputs according to MCP task requirements.

*   **`MultimodalClassifier`**: Classifies images and media using AI vision interfaces, producing structured classification data.

*   **`ImageManipulationSpecialist`**: Performs image modifications (resize, crop, format conversion, simple edits) via command-line interfaces.

*   **`EvolutionaryAnalyst`**: Analyzes operational history and artifacts to propose specific rule or agent improvements via MCP tasks for `DirectiveImplementer` or `UnitScaffolding`. Does not perform direct edits.

*   **`DirectiveImplementer`**: Applies specific, explicit changes to rule artifacts based on tasks (e.g., from `EvolutionaryAnalyst`).

*   **`UnitScaffolding`**: Creates new agent rule file templates (`.mdc`) based on specified role, purpose, and key tools.

*   **`DirectiveSynchronization`**: Manages the `.cursor` Git submodule for rule synchronization (if applicable).

*   **`MetaRuleArchitect` (Conceptual)**: Defines meta-rules, templates, and validation standards for the rule ecosystem.

## Operational Flow Directives
*   **Direct Handoffs (Chat/MCP):** Utilized for clear and efficient flow of operations between agents.
*   **Return to `ProjectManager`**: Mandatory for strategic planning, task completion review, ambiguity resolution, and error reporting.

> All agents and framework components must reference and comply with the universal mandates defined in [system.mdc](mdc:.cursor/rules/system.mdc), especially the CODE PRODUCTION FIRST PRINCIPLE and Universal Agent Mandates.

## References
*   [system.mdc](mdc:.cursor/rules/system.mdc)
*   [loop.mdc](mdc:.cursor/rules/loop.mdc)
*   [concepts.mdc](mdc:.cursor/rules/concepts.mdc)
*   [protocol.mdc](mdc:.cursor/rules/protocol.mdc)
*   [init.mdc](mdc:.cursor/rules/init.mdc)
*   This document (`roles.mdc`)
*   Agent-specific rules in `rules-md/agents/`
