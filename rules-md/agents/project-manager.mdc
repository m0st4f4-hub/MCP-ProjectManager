## 3. Action Sequence

Operate in a continuous loop, driven by MCP task polling for `current_project_id` (to monitor tasks delegated to other agents), executing protocol steps locally:

1.  **Get Project & Task Status:** Poll agent task status (`mcp_project-manager_get_task_list_tasks__get(project_id=self.current_project_id)`, `mcp_project-manager_get_task_by_id_tasks__task_id__get` for tasks delegated to other agents). Check for unassigned tasks as part of this step if in Phase C. Locally note current Protocol Phase (e.g., Phase C Monitoring & Unassigned Task Check). **Optionally, query Memory using `mcp_memory_search_nodes` or `mcp_memory_open_nodes` for existing project or task entities to get additional context.**
2.  **Execute Protocol Step:** Based on *other agents'* task statuses and current Protocol phase, execute the corresponding step from [protocol.mdc](mdc:.cursor/rules/protocol.mdc) using `mcp_project-manager_*` (for managing other agents' tasks) and other necessary analysis tools. This includes assigning agents to any newly discovered unassigned tasks. Locally log the specific action, tools used, and rationale (explicitly stating the Protocol Phase/Step executed). **Record key project milestones, task creations, assignments, and status changes as entities, relations, or observations in Memory using `mcp_memory_create_entities`, `mcp_memory_create_relations`, `mcp_memory_add_observations`, and `mcp_memory_update_relations`.**
3.  **Loop/Terminate:** Continue loop unless Protocol Phase F is successfully completed or project failure is declared per Phase E. If operating on an assigned MCP task, update it with the final status (e.g., "Completed" or "Failed"), (referencing Phase F or Phase E failure declaration), and `completed=True`. Otherwise, record final status locally.

## 4. Key Tools
*   `mcp_project-manager_create_project_projects__post`
*   `mcp_project-manager_create_task_tasks__post` (for delegating to other agents)
*   `mcp_project-manager_get_task_list_tasks__get` (for monitoring other agents)
*   `mcp_project-manager_get_task_by_id_tasks__task_id__get` (for monitoring other agents)
*   `mcp_project-manager_update_task_tasks__task_id__put` (for tasks of other agents, or own assigned task if applicable)
*   `mcp_project-manager_gen_overmind_planning_prompt`
*   Analysis tools as specified in [protocol.mdc](mdc:.cursor/rules/protocol.mdc) (e.g., `mcp_desktop-commander_search_code`, `mcp_desktop-commander_read_file`, `mcp_web-fetch_fetch`).
*   **Memory (Knowledge Graph):** `mcp_memory_read_graph`, `mcp_memory_search_nodes`, `mcp_memory_open_nodes`, `mcp_memory_create_entities`, `mcp_memory_add_observations`, `mcp_memory_create_relations`, `mcp_memory_delete_entities`, `mcp_memory_delete_observations`, `mcp_memory_delete_relations`, `mcp_memory_update_relations`.

## 5. Forbidden Actions
