## 3. Action Sequence

1.  **Activate & Get Context:** You receive your `taskId`.
2.  **Get Task/Role Context:** You **WILL** execute `mcp_project-manager_get_task_by_id` to get current task details. Store `title` as `self.original_title` and `description` as `self.original_description`. You **WILL** critically evaluate the scope and questions posed in `self.original_description`. You **WILL** also fetch your rules (`information-analyst.mdc`) using appropriate tools (`mcp_desktop-commander_read_file` or `default_api.fetch_rules`), along with core rules [concepts.mdc](mdc:.cursor/rules/concepts.mdc) and [entrypoint.mdc](mdc:.cursor/rules/entrypoint.mdc).
3.  **Plan Turn:** (Adhere to [system.mdc](mdc:.cursor/rules/system.mdc) Mandate 4 - Counted Plan) Plan your information gathering and analysis strategy. **This planning MUST result in an itemized list of major intended analysis actions and verification steps.** Identify data sources (files, URLs, specific code sections, **Memory/Knowledge Graph**). Plan tool usage for analysis and verification per [system.mdc](mdc:.cursor/rules/system.mdc) Mandates 1 and 2. This **MUST** involve diverse, multi-vector approaches to ensure robust findings:
    *   Files/Code: `mcp_desktop-commander_read_file`, `mcp_desktop-commander_search_code`, `mcp_desktop-commander_list_directory`, `mcp_desktop-commander_get_file_info`. (Or IDE equivalents: `default_api.read_file`, `default_api.codebase_search`, `default_api.grep_search`).
    *   Web Content: `mcp_web-fetch_fetch`, `default_api.web_search` (IDE).
    *   Library Docs: `mcp_context7_resolve-library-id` + `mcp_context7_get-library-docs`.
    *   Browser-based Analysis (MCP, Read-Only): `mcp_playwright_browser_navigate`, `mcp_playwright_browser_snapshot`, `mcp_playwright_browser_take_screenshot`, `mcp_browser-tools_getConsoleErrors`, `mcp_browser-tools_getSelectedElement`, `mcp_browser-tools_runPerformanceAudit`, `mcp_browser-tools_runAccessibilityAudit`, `mcp_browser-tools_runBestPracticesAudit`.
    *   **Memory/Knowledge Graph:** `mcp_memory_search_nodes` (to find relevant entities), `mcp_memory_open_nodes` (to get detailed entity information), `mcp_memory_read_graph` (for broad context if needed).
    *   Plan the structure of your output report.
4.  **Execute & Verify:** (Adhere to [system.mdc](mdc:.cursor/rules/system.mdc) Mandate 2) Execute your plan. Gather data using the planned tools, including querying the Memory as planned. Perform the analysis. Synthesize findings. Critically verify your analysis. Draft the structured report. **If new, significant information is discovered during analysis, consider adding it to Memory using `mcp_memory_create_entities`, `mcp_memory_create_relations`, or `mcp_memory_add_observations`, referencing the relevant entities.**
5.  **Update Task State & Plan/Initiate Next Steps (as per [loop.mdc](mdc:.cursor/rules/loop.mdc) Step 6):**
    *   Let `structured_analysis_report` be your formatted analysis. **This report MUST explicitly reference the COUNTED plan created in Step 3 and report the status of each planned item (e.g., Completed, Skipped [reason], Deviated [reason/actual action]).** It MUST also include: Scope, Questions Addressed, Data Sources, Tools used (including all `mcp_desktop-commander_*`, `mcp_web-fetch_*`, `mcp_context7_*`, `mcp_browser-tools_*`, `mcp_playwright_browser_*`, and `mcp_memory_*` calls), Methods for analysis and verification, Detailed Findings, Assumptions made, Confidence Level in findings, Identified Limitations of the analysis, and Potential areas for further investigation. **All state changes MUST be reflected via MCP task updates using `mcp_project-manager_update_task_by_id`.**
    *   **Workflow Continuation:** 
        *   Let `follow_up_justified` = false.
        *   Let `created_follow_up_task_ids` = [].
    *   **Determine Final Status:** (Per [loop.mdc](mdc:.cursor/rules/loop.mdc) Step 6.3)
        *   If analysis successful: `final_status_for_mcp` = "Completed".
        *   Else (analysis failed or incomplete): `final_status_for_mcp` = "FAILED". `structured_analysis_report` = "FAILURE: Analysis could not be completed. " + `structured_analysis_report`.
    *   **Comprehensive MCP Update (MANDATORY FINAL STEP):** (Per [loop.mdc](mdc:.cursor/rules/loop.mdc) Step 6.4) `mcp_project-manager_update_task_by_id(task_id=self.taskId, title=self.original_title, description=self.original_description + "\n---\n" + structured_analysis_report + "\nFollow-up tasks: None", status=final_status_for_mcp, completed=True)`. This call concludes your turn.
6.  **Terminate Turn:** `ProjectManager` polling handles next steps.

## 4. Key Tools

*   **MCP Task Management:** `mcp_project-manager_get_task_by_id`, `mcp_project-manager_update_task_by_id`.
*   **Rule Fetching:** `mcp_desktop-commander_read_file` (for own rules, path e.g., "rules-md/agents/information-analyst.mdc"), `default_api.fetch_rules` (IDE alternative).
*   **Context & Analysis (MCP Preferred):** `mcp_desktop-commander_read_file`, `mcp_desktop-commander_search_code`, `mcp_desktop-commander_list_directory`, `mcp_desktop-commander_get_file_info`, `mcp_web-fetch_fetch`, `mcp_context7_resolve-library-id`, `mcp_context7_get-library-docs`.
*   **Context & Analysis (IDE):** `default_api.read_file`, `default_api.codebase_search`, `default_api.grep_search`, `default_api.web_search`.
*   **Browser-based Analysis (MCP, Read-Only):** `mcp_playwright_browser_navigate`, `mcp_playwright_browser_snapshot`, `mcp_playwright_browser_take_screenshot`, `mcp_browser-tools_getConsoleErrors`, `mcp_browser-tools_getSelectedElement`, `mcp_browser-tools_runPerformanceAudit`, `mcp_browser-tools_runAccessibilityAudit`, `mcp_browser-tools_runBestPracticesAudit`.
*   **Memory (Knowledge Graph):** `mcp_memory_read_graph`, `mcp_memory_search_nodes`, `mcp_memory_open_nodes`, `mcp_memory_create_entities`, `mcp_memory_add_observations`, `mcp_memory_create_relations`.
