\"\"\"Service layer for Project Templates.\"\"\"\n\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\n\nfrom backend.models.project_template import ProjectTemplate as ProjectTemplateModel\nfrom backend.schemas.project_template import ProjectTemplateCreate, ProjectTemplateUpdate\nfrom backend.crud import project_templates as project_template_crud # Alias to avoid name collision\n\nclass ProjectTemplateService:\n    def __init__(self, db: Session):\n        self.db = db\n\n    def create_template(self, template: ProjectTemplateCreate) -> ProjectTemplateModel:\n        \"\"\"Create a new project template.\"\"\"\n        return project_template_crud.create_project_template(self.db, template)\n\n    def get_template(self, template_id: str) -> Optional[ProjectTemplateModel]:\n        \"\"\"Retrieve a single project template by ID.\"\"\"\
        return project_template_crud.get_project_template(self.db, template_id)\n\n    def get_template_by_name(self, name: str) -> Optional[ProjectTemplateModel]:\n        \"\"\"Retrieve a single project template by name.\"\"\"\n        return project_template_crud.get_project_template_by_name(self.db, name)\n\n    def get_templates(self, skip: int = 0, limit: int = 100) -> List[ProjectTemplateModel]:\n        \"\"\"Retrieve multiple project templates.\"\"\"\
        return project_template_crud.get_project_templates(self.db, skip, limit)\n\n    def update_template(self, template_id: str, template_update: ProjectTemplateUpdate) -> Optional[ProjectTemplateModel]:\n        \"\"\"Update a project template by ID.\"\"\"\
        return project_template_crud.update_project_template(self.db, template_id, template_update)\n\n    def delete_template(self, template_id: str) -> bool:\n        \"\"\"Delete a project template by ID.\"\"\"\
        return project_template_crud.delete_project_template(self.db, template_id)\n 