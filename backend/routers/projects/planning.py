from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session

from ....database import get_sync_db as get_db
from ....services.audit_log_service import AuditLogService
from ....auth import get_current_active_user
from ....models import User as UserModel  # For type hinting current_user  # Import standardized API response models
from ....schemas.api_responses import DataResponse


router = APIRouter(
    prefix="/generate-planning-prompt",
    tags=["Project Planning"],
)  # Dependency for AuditLogService


def get_audit_log_service(db: Session = Depends(get_db)) -> AuditLogService:
    return AuditLogService(db)


@router.post("/", response_model=DataResponse[dict], summary="Generate Planning Prompt", operation_id="generate_planning_prompt")


async def generate_planning_prompt_endpoint(
    request_data: dict,
    current_user: UserModel = Depends(get_current_active_user),
    audit_log_service: AuditLogService = Depends(get_audit_log_service)
):
    """Generate a project manager planning prompt based on a goal."""
    try:
        goal = request_data.get("goal", "")

        if not goal:
            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Goal is required")  # Generate a comprehensive planning prompt
        planning_prompt = f"""  # Project Manager Planning Session\n\n#  # Goal\n{goal}\n\n#  # Planning Framework\n\n##  # 1. Goal Analysis\n- Break down the goal into specific, measurable objectives\n- Identify key success criteria and deliverables\n- Define scope and constraints\n\n##  # 2. Task Breakdown\n- Identify major phases and milestones\n- Break down phases into specific tasks\n- Estimate effort and dependencies between tasks\n\n##  # 3. Resource Planning\n- Identify required skills and team members\n- Determine necessary tools and technologies\n- Plan for potential risks and mitigation strategies\n\n##  # 4. Timeline and Milestones\n- Create realistic timeline with buffer time\n- Define key checkpoints and review gates\n- Plan for iterative feedback and adjustments\n\n##  # 5. Success Metrics\n- Define quantifiable success indicators\n- Plan monitoring and tracking mechanisms\n- Establish regular review and adjustment cycles\n\n#  # Next Steps\n1. Review and refine this planning framework\n2. Create detailed task breakdown structure\n3. Assign responsibilities and timelines\n4. Begin execution with regular monitoring\n\n#  # Agent Coordination\nConsider which specialized agents might be needed:\n- Development agents for technical implementation\n- Review agents for quality assurance\n- Documentation agents for maintaining records\n- Testing agents for validation\n\n---\n*Generated by Task Manager Planning Assistant*\n"""  # Log the planning request
        await audit_log_service.create_log(
            action="generate_planning_prompt",
            user_id=current_user.id,
            details={"goal": goal}
        )

        return DataResponse[dict](
            data={"prompt": planning_prompt},
            message="Planning prompt generated successfully"
        )

    except Exception as e:
        logging.error(f"Error in POST /projects/generate-planning-prompt: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"Internal server error: {str(e)}")
