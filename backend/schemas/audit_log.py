# Task ID: <taskId>
# Agent Role: CodeStructureSpecialist
# Request ID: <requestId>
# Project: task-manager
# Timestamp: <timestamp>

from pydantic import BaseModel, ConfigDict, Field
from typing import Optional, Dict, Any
from datetime import datetime

# --- Audit Log Schemas ---
class AuditLogBase(BaseModel):
    """Base schema for audit log attributes."""
    action: str = Field(..., description="The action performed.")
    user_id: Optional[str] = Field(
        None, description="The ID of the user who performed the action (if applicable)."
    )
    details: Optional[Dict[str, Any]] = Field(
        None, description="Optional details about the action (e.g., changes)."
    )
    entity_type: str = Field(..., description="The type of the entity affected.")
    entity_id: str = Field(..., description="The ID of the entity affected.")


class AuditLogCreate(AuditLogBase):
    """Schema for creating a new audit log entry."""
    # The timestamp should be generated by the server, not provided by the client.
    pass


class AuditLog(AuditLogBase):
    """Schema for representing an audit log entry in API responses."""
    id: int = Field(...,
                    description="Unique identifier for the audit log entry.")
    timestamp: datetime = Field(..., description="Timestamp when the log entry was created.")

    model_config = ConfigDict(from_attributes=True)